Recently I've been working a bit on socket programming for an assignment.

Here are some of the main pitfalls that I have made that could have saved me a lot of time if I knew of them / was warned a bit before hand.

Turns out that when you create a socket that the name used for socket cannot be determined by the user "as such". What I mean to say, is that it relies upon the DNS server name. Which means that for a local program, you will most likely be using "localhost", which is the DNS official name for any program ran on a local system.
So don't go trying to name your local server "Game" {GameServer} or something random like like I did. :)

Also some key things I would also like to remember.

On the ServerSide
portNum = 1234; //some random num - i.e. any unused port num, as some might already be used by system.
ServerSocket server = new ServerSocket(portNum);


try (
Socket client = server.accept();


//Also by doing this I learnt some cool ways to use the try catch statement that I previously didn't know. Was completely unaware that the try statement has a constructor variant! Is can take an entire initialisation as an argument.


26/05/19
Key words:
- Flushing - when information is sent from one end point (one socket) to another end point. [i.e. from client socket to server socket.]

Something additional that I've learned. In order to use the readLine capabilities of a buffered reader in order to flush information down a socket from client to server and vice vera, you have to make sure that you print each statement on a new line, else the information will not be able to be called on the other end using println. As readLine only works when you are using lines! :D

Makes sense right! So don't put use print or else the information will not go through from one end to another and you will be wondering why it doesn't, when really it is simply waiting for the end of a line in order to read it.\

Also printf and other format functions will append a line break "\n" , so they (along with println) will work with something called "auto flushing". Auto flushing is a feature that you can enable on buffered readers, that allows them
to be flushed each time there is a new line or you use a function that does this.
